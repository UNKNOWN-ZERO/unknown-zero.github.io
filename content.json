{"meta":{"title":"0's devlog","subtitle":"write code, make world","description":"study & development log","author":"unknown","url":"https://unknown-zero.github.io"},"pages":[],"posts":[{"title":"0x0001 Minifilter Driver#0","slug":"LibraNoir-1","date":"2019-03-16T06:15:32.000Z","updated":"2019-03-16T07:05:25.399Z","comments":true,"path":"2019/03/16/LibraNoir-1/","link":"","permalink":"https://unknown-zero.github.io/2019/03/16/LibraNoir-1/","excerpt":"","text":"Beginning Minifilter DriverBefore we start, if you don’t know about Windows Filesystem Minifilter Driver, read this articles at MSDN. Filter Manager Architecture If an application requests a file IO to OS or uses an API related with file IO, the workflow of its requests transmits just like this picture. All requests are processed in order and going down to lowest hierarchy which is Hardware and its reply will be going up to the user level which is an application. we develop a filesystem minifilter driver to intercept the request at the filesystem driver stack. OK, now let’s take a look at the basic source code. Basic Source CodeThough this code is not fully complete, we can understand its function. 123456789101112131415161718#include &lt;fltKernel.h&gt;NTSTATUSDriverEntry( _In_ PDRIVER_OBJECT DriverObject, _In_ PUNICODE_STRING RegistryPath)&#123; NTSTATUS status; status = FltRegisterFilter(DriverObject, &amp;FilterRegistration, &amp;LibraNoirData.Filter); status = FltStartFiltering(LibraNoirData.Filter); return status;&#125; DriverEntry function is a main function of our driver. When we load our filesystem minifilter driver into our kernel, The filter manager of filesystem call this routine at first place. In this function, we register our minifilter driver routine and notify filter manager that we want our driver in the filtering stack to start filtering. Now, let’s take a look at the data structure using in registering filter driver. 1234567891011121314151617181920212223242526272829303132typedef struct _LIBRANOIRFILTER_DATA_ &#123; PDRIVER_OBJECT DriverObject; PFLT_FILTER Filter;&#125;LIBRANOIR_DATA, *PLIBRANOIR_DATA;CONST FLT_REGISTRATION FilterRegistration = &#123; sizeof(FLT_REGISTRATION), // Size FLT_REGISTRATION_VERSION, // Version 0, // Flags NULL, // Context Callbacks, // Operation callbacks LibraNoirFilterUnload, // MiniFilterUnload LibraNoirFilterInstanceSetup, // InstanceSetup LibraNoirFilterInstanceQueryTeardown, // InstanceQueryTeardown NULL, // InstanceTeardownStart NULL, // InstanceTeardownComplete NULL, // GenerateFileName NULL, // GenerateDestinationFileName NULL // NormalizeNameComponent&#125;;CONST FLT_OPERATION_REGISTRATION Callbacks[] = &#123; &#123; IRP_MJ_CREATE, 0, LibraNoirFilterPreOperation, NULL &#125;, &#123; IRP_MJ_SET_INFORMATION, 0, LibraNoirFilterPreOperation, NULL &#125;, &#123; IRP_MJ_OPERATION_END &#125;&#125;; “_LIBRANOIRFILTER_DATA_” structure has two elements PDRIVER_OBJECT and PFLT_FILTER which is needed at registering filter driver. “FLT_REGISTRATION” array contains data of our driver runtime. “FLT_OPERATION_REGISTRATION” array contains information of what kind of file IO request that we want to filter. You can see the IRP list on here. File Write/Append(IRP_MJ_CREATE) and File Deletion(IRP_MJ_SET_INFORMATION) is needed to filter in our minifilter driver. Next time, We will take a look at filtering callback functions","categories":[{"name":"Development Log","slug":"Development-Log","permalink":"https://unknown-zero.github.io/categories/Development-Log/"},{"name":"LibraNoir","slug":"Development-Log/LibraNoir","permalink":"https://unknown-zero.github.io/categories/Development-Log/LibraNoir/"}],"tags":[{"name":"Development","slug":"Development","permalink":"https://unknown-zero.github.io/tags/Development/"},{"name":"LibraNoir","slug":"LibraNoir","permalink":"https://unknown-zero.github.io/tags/LibraNoir/"},{"name":"C","slug":"C","permalink":"https://unknown-zero.github.io/tags/C/"},{"name":"C++","slug":"C","permalink":"https://unknown-zero.github.io/tags/C/"},{"name":"C#","slug":"C","permalink":"https://unknown-zero.github.io/tags/C/"},{"name":"Windows","slug":"Windows","permalink":"https://unknown-zero.github.io/tags/Windows/"},{"name":"Kernel","slug":"Kernel","permalink":"https://unknown-zero.github.io/tags/Kernel/"}]},{"title":"0x0000 Let's Get Started","slug":"LibraNoir-0","date":"2019-02-24T05:05:04.000Z","updated":"2019-02-24T06:24:46.716Z","comments":true,"path":"2019/02/24/LibraNoir-0/","link":"","permalink":"https://unknown-zero.github.io/2019/02/24/LibraNoir-0/","excerpt":"","text":"IntroductionIn recent ransomware threat, a solution ensures our data is needed. So let’s make a security software running on Windows that notify us when unidentified programs access a file. The name means nothing. It’s just my favorite colour and my zodiac sign. Brief PlanOk, the project can be divided by 3 parts. A filesystem minifilter driver that detects the file IO and notify Windows application. The communication module that communicates with minifilter driver. A Windows application with UI. Filesystem Minifilter DriverAs we can see in its name, it’s kernel mode. It mean we must be careful about memory usage, algorithm, function calls and etc.. When we violate one of its rules, we may see BSOD(Blue Screen of Death). That’s why we have to fully understand what we use. I mean WE MUST READ MANUALS AND FOLLOW. The Windows Hardware Dev Center especially “Installable file system” chapter is what we need. Also we need Windows Driver Kit, and Visual Studio 2017 to develop and build a filesystem minifilter driver. The Features of FileSystem Minifilter Driver can be summarized as follow. Interfere File IO Operation. Communicate or Notify Information about Files and Processes. Process Protection. The Filesystem Minifilter Driver will be developed with C. Communication ModuleIt’s a simple module sets of communicating functions with filesystem minifilter driver. It will be developed with C++ as DLL to support feature to a Windows application. Windows applicationThis part is mostly about UI showing information to user. When filesystem minifilter driver notify us that untrusted file IO happens, our program must show information about process information and its target file information for us to determine whether we permit or deny its file IO. This is a main feature of our solution. Also, we provide additional features to ensure user’s data, such as locking folders with password, auto backup on designated folder and process network usage monitor. Furthermore, we could make a cloud server to share user’s experience data like white list and black list of process reputation. This part will be developed with C# and winform. OK! Let’s Get Started!!!","categories":[{"name":"Development Log","slug":"Development-Log","permalink":"https://unknown-zero.github.io/categories/Development-Log/"},{"name":"LibraNoir","slug":"Development-Log/LibraNoir","permalink":"https://unknown-zero.github.io/categories/Development-Log/LibraNoir/"}],"tags":[{"name":"Development","slug":"Development","permalink":"https://unknown-zero.github.io/tags/Development/"},{"name":"LibraNoir","slug":"LibraNoir","permalink":"https://unknown-zero.github.io/tags/LibraNoir/"},{"name":"C","slug":"C","permalink":"https://unknown-zero.github.io/tags/C/"},{"name":"C++","slug":"C","permalink":"https://unknown-zero.github.io/tags/C/"},{"name":"C#","slug":"C","permalink":"https://unknown-zero.github.io/tags/C/"},{"name":"Windows","slug":"Windows","permalink":"https://unknown-zero.github.io/tags/Windows/"},{"name":"Kernel","slug":"Kernel","permalink":"https://unknown-zero.github.io/tags/Kernel/"}]},{"title":"0x0000 Hello World!","slug":"Hello-World","date":"2019-02-02T09:49:11.000Z","updated":"2019-02-24T05:00:39.463Z","comments":true,"path":"2019/02/02/Hello-World/","link":"","permalink":"https://unknown-zero.github.io/2019/02/02/Hello-World/","excerpt":"","text":"DischargeWhile serving in the military, I studied network and server administration, programming and reversing. After I finish my service at Cyber Command, I decide to run a blog for myself to enhance my expertise. I made a new git repository as a new beginning and I’m going to post my personal development process on my blog. BlogI named my blog ‘0(zero)’ to remember trying like the first time. To-do List Personal Projects Algorithm Windows/Linux Reversing/Security","categories":[{"name":"Lifestyle","slug":"Lifestyle","permalink":"https://unknown-zero.github.io/categories/Lifestyle/"}],"tags":[{"name":"Lifestyle","slug":"Lifestyle","permalink":"https://unknown-zero.github.io/tags/Lifestyle/"}]}]}